工厂结构:
ChannelFactory<--ServerChannelFactory<--ServerSocketChannelFactory
<--NioServerSocketChannelFactory(类)

分别生产
Channel<--ServerChannel(标志性接口，没有定义api)<--ServerSocketChannel<--OioServerSocketChannel

每一个Channel都有一个ChannelPipeline，
Channel就像是煤矿的隧道，ChannelPipeline就像是隧道中的运煤轨道。
而ChannelBuffer就像是运煤车。

一个ChannelFactory对应一个ChannelSink(水池)，
所有从这个ChannelFactory生产出来的通道每条都对应一条ChannelPipeline，
所有这些ChannelPipeline都流向这个通道工厂的ChannelSink。

就好像是一座煤矿山开了很到隧道，每个隧道都建了运煤轨道，
这些运煤轨道都连到了煤池，这样所有运煤轨道上的运煤车所装载的煤矿都可以倒到这个煤池中。

同时一个ChannelFactory还有两个线程池bossExecutor和workerExecutor

ChannelFactory又是一个ExternalResourceReleasable，
可以结束两个线程池bossExecutor和workerExecutor中的所有线程。

如何生成一条Channel，
构造一条Channel，至少要4个参数，
1.构造它的ChannelFactory
2.与这条Channel相关的ChannelPipeline
3.构造它的ChannelFactory的sink

2和3是为了把这条通道和sink系到ChannelPipeline中，

另外，如果这条通道是通过ServerSocket的accept得到的，
那么这条通道还会有一个对父通道(对应ServerSocket的通道)的引用


事件触发流程:
在调用ServerSocketChannel子类的构造函数中先:
1: fireChannelOpen 通知Upstream事件处理器(handler)准备要数据(比如要绑定到ServerSocket的端口号)
(还有构造函数中生成一个ChannelConfig子类，以便在Upstream事件处理器中填充一些配置数据)
